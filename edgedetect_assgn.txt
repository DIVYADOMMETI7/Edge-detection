from helper_functions import *

#-----------------------FILL IN THE FOLDER WHERE YOUR IMAGE EXISTS--------------------------
datafolder = "/Users/divyadommeti/Downloads/assgn1code 2/images/"
imgpath = datafolder + "5.jpg" 
#----------------------------------------STARTER CODE----------------------------------------
# Convert the color image to grayscale and returns the grayscale pixels 
pixel_values = read_colorimg(imgpath)
# The returned pixel values INCLUDE 2 boundary rows and 2 boundary colns. Therefore,
numb_rows = len(pixel_values) - 2
numb_colns = len(pixel_values[0]) - 2
#
#----------------------------------------WRITE YOUR CODE HERE----------------------------------------
# Create a data structure to store updated pixel information
new_pixel_values = [[0 for x in range(numb_colns)]for y in range(numb_rows)]
# Define the 3 x 3 mask as a tuple of tuples
mask = ((-1,0,1),(-2,0,2),(-1,0,1))

# Implement a function to slice a part from the image as a 2D list
def get_slice_2d_list(pixels,x,y):
    slice_lt = [i[y-1:y+2] for i in pixels[x-1:x+2]]
    return slice_lt

# Implement a function to flatten a 2D list or a 2D tuple
def flatten(ng_pixel):
    #end_lt = [b for a in lt1 for b in a]
    flat_list = []
    for element in ng_pixel:
            # If the element is of type list, iterate through the sublist
            for item in element:
                flat_list.append(item)
    return flat_list

for x in range(1,numb_rows+1):
    for y in range(1,numb_colns+1):
# For each of the pixel values, excluding the boundary values
    # Create little local 3x3 box using list slicing
        neighbour_pixels = get_slice_2d_list(pixel_values,x,y)
    # Apply the mask
        temp_neighbour = flatten(neighbour_pixels)
        temp_mask = flatten(mask)
        temp_mult = map(lambda i,j : i*j, temp_neighbour, temp_mask)
        temp_final_pixel = sum(list(temp_mult))
        new_pixel_values[x-1][y-1] =  temp_final_pixel    
    # Sum all the multiplied values and set the new pixel value
#        
#----------------------------------------END YOUR CODE HERE----------------------------------------
# Verify your result
verify_result(pixel_values, new_pixel_values, mask)
# View the original image and the edges of the image
view_images(imgpath, new_pixel_values)


